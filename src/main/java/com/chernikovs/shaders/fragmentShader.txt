<<<<<<< HEAD
#version 330

//in vec3 pos;
//in vec3 colour;

in vec2 pass_textureCoordinates;
in vec3 surfaceNormal;
in vec3 toLightVector[5];
in vec3 toCameraVector;

out vec4 out_Color;

uniform sampler2D modelTexture;
uniform vec3 lightColour[5];
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 colour;

void main(void) {

	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitVectorToCamera = normalize(toCameraVector);

	vec3 totalDiffuse = vec3(0.0);
	vec3 totalSpecular = vec3(0.0);
	
	for (int i = 0; i < 5; i++) {
	
		vec3 unitLightVector = normalize(toLightVector[i]);
		float cDotn = dot(unitVectorToCamera, unitNormal);
		if (cDotn < 0) {
			unitNormal = -unitNormal;
		}
			
		float nDotl = dot(unitNormal, unitLightVector);
		float brightness = max(nDotl, 0.0);
		totalDiffuse = totalDiffuse + brightness * lightColour[i];
		
		if (nDotl > 0) {
			vec3 lightDirection = -unitLightVector;
			vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
		
			float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
			specularFactor = max(specularFactor, 0.0);
			float dampedFactor = pow(specularFactor, shineDamper);
			totalSpecular = totalSpecular + 0.4 * dampedFactor * reflectivity * lightColour[i];
		}
	}
	totalDiffuse = totalDiffuse + vec3(0.4);
	//totalDiffuse = max(totalDiffuse, 0.0);
	//totalDiffuse = min(max(totalDiffuse, 0.4), 1.0);
	//totalSpecular = vec3(0.0);

	//out_Color = vec4(totalDiffuse, 1.0) * texture(modelTexture,pass_textureCoordinates) + vec4(totalSpecular, 1.0);
	out_Color = vec4(totalDiffuse, 1.0) * vec4(colour.xyz, 1.0) + vec4(totalSpecular, 1.0);
=======
#version 330

//in vec3 pos;
//in vec3 colour;

in vec2 pass_textureCoordinates;
in vec3 surfaceNormal;
in vec3 toLightVector[5];
in vec3 toCameraVector;

out vec4 out_Color;

uniform sampler2D modelTexture;
uniform vec3 lightColour[5];
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 colour;

void main(void) {

	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitVectorToCamera = normalize(toCameraVector);

	vec3 totalDiffuse = vec3(0.0);
	vec3 totalSpecular = vec3(0.0);
	
	for (int i = 0; i < 5; i++) {
	
		vec3 unitLightVector = normalize(toLightVector[i]);
		float cDotn = dot(unitVectorToCamera, unitNormal);
		if (cDotn < 0) {
			unitNormal = -unitNormal;
		}
			
		float nDotl = dot(unitNormal, unitLightVector);
		float brightness = max(nDotl, 0.0);
		totalDiffuse = totalDiffuse + brightness * lightColour[i];
		
		if (nDotl > 0) {
			vec3 lightDirection = -unitLightVector;
			vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
		
			float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
			specularFactor = max(specularFactor, 0.0);
			float dampedFactor = pow(specularFactor, shineDamper);
			totalSpecular = totalSpecular + 0.4 * dampedFactor * reflectivity * lightColour[i];
		}
	}
	totalDiffuse = totalDiffuse + vec3(0.4);
	//totalDiffuse = max(totalDiffuse, 0.0);
	//totalDiffuse = min(max(totalDiffuse, 0.4), 1.0);
	//totalSpecular = vec3(0.0);

	//out_Color = vec4(totalDiffuse, 1.0) * texture(modelTexture,pass_textureCoordinates) + vec4(totalSpecular, 1.0);
	out_Color = vec4(totalDiffuse, 1.0) * vec4(colour.xyz, 1.0) + vec4(totalSpecular, 1.0);
>>>>>>> 4f3c886f3ff1ae2c84328c3abe8a64dfc85d4b78
}