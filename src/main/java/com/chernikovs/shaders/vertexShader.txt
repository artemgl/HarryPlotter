#version 330

in vec3 position;
in vec2 textureCoordinates;
in vec3 normal;

out vec2 pass_textureCoordinates;
//out vec3 pos;
out vec3 surfaceNormal;
out vec3 toLightVector[5];
out vec3 toCameraVector;

uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform vec3 lightPosition[5];

void main(void){

	vec4 worldPosition = transformationMatrix * vec4(position,1.0);
	gl_Position = projectionMatrix * viewMatrix * worldPosition;
	pass_textureCoordinates = textureCoordinates;
	
	surfaceNormal = (transformationMatrix * vec4(normal, 0.0)).xyz;
	for (int i = 0; i < 5; i++) {	
		toLightVector[i] = lightPosition[i];// - worldPosition.xyz;
	}
	toCameraVector = (inverse(viewMatrix) * vec4 (0.0, 0.0, 0.0, 1.0)).xyz - worldPosition.xyz;
	
	//pos = position;
	
}